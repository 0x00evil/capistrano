#!/usr/bin/env ruby

require 'optparse'
require 'fileutils'

OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [path]"

  opts.on("-h", "--help", "Displays this help info") do
    puts opts
    exit 0
  end

  begin
    opts.parse!(ARGV)
  rescue OptionParser::ParseError => e
    warn e.message
    puts opts
    exit 1
  end
end

if ARGV.empty?
  abort "Please specify the directory to capify, e.g. `#{File.basename($0)} .'"
elsif !File.exists?(ARGV.first)
  abort "`#{ARGV.first}' does not exist."
elsif !File.directory?(ARGV.first)
  abort "`#{ARGV.first}' is not a directory."
elsif ARGV.length > 1
  abort "Too many arguments; please specify only the directory to capify."
end

def unindent(string)
  indentation = string[/\A\s*/]
  string.strip.gsub(/^#{indentation}/, "")
end

files = {
  "Capfile" => unindent(<<-FILE),
    load 'deploy' if respond_to?(:namespace) # cap2 differentiator
    Dir['vendor/plugins/*/recipes/*.rb'].each { |plugin| load(plugin) }
    load 'config/deploy'
  FILE

  "config/deploy.rb" => unindent(<<-FILE),
    set :application, "set your application name here"
    set :repository,  "set your repository location here"

    # If you have previously been relying upon the code to start, stop 
    # and restart your mongrel application, or if you rely on the database
    # migration code, please uncomment the lines you require below
    
    # load 'ext/rails/migrations'
    
    # There are also new utility libaries shipped with the core these 
    # include the following, please see individual files for more
    # documentation, or run `cap -T` with the following lines commented out
    # to see what they make available.
    
    # load 'ext/apache'
    # load 'ext/passenger_mod_rails'

    # load 'ext/web-disable-enable'

    # If you aren't deploying to /u/apps/\#{application} on the target
    # servers (which is the default), you can specify the actual location
    # via the :deploy_to variable:
    # set :deploy_to, "/var/www/\#{application}"

    # If you aren't using Subversion to manage your source code, specify
    # your SCM below:
    # set :scm, :subversion

    role :web, "your web-server here"
  FILE
}

base = ARGV.shift
files.each do |file, content|
  file = File.join(base, file)
  if File.exists?(file)
    warn "[skip] `#{file}' already exists"
  elsif File.exists?(file.downcase)
    warn "[skip] `#{file.downcase}' exists, which could conflict with `#{file}'"
  elsif !File.exists?(File.dirname(file))
    FileUtils.mkdir(File.dirname(file))
    retry
    warn "[skip] directory `#{File.dirname(file)}' did not exist, created."
  else
    puts "[add] writing `#{file}'"
    File.open(file, "w") { |f| f.write(content) }
  end
end

puts "[done] capified!"
